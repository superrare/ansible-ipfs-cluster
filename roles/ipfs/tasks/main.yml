- name: create download folder for go-ipfs
  become: yes
  file:
    state: directory
    owner: root
    group: root
    dest: /opt/go-ipfs/{{ipfs_version}}

### Used to avoid sudo error on first run
# ###: fatal: [34.141.35.132]: FAILED! => {"msg": "Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user (rc: 1, err: chmod: invalid mode: ‘A+user:ipfs:rx:allow’\nTry 'chmod --help' for more information.\n}). For information on working around this, see https://docs.ansible.com/ansible-core/2.12/user_guide/become.html#risks-of-becoming-an-unprivileged-user"}
# - name: Update repositories cache and install acl package
#   become: yes
#   become_user: root
#   apt:
#     name: acl
#     update_cache: yes

- name: download and unpack IPFS
  when: not ansible_check_mode
  block:
    - name: download IPFS
      become: yes
      get_url:
        url: "{{ dist_url }}/go-ipfs/{{ipfs_version}}/go-ipfs_{{ipfs_version}}_linux-{{ipfs_arch}}.tar.gz"
        dest: /opt/go-ipfs/{{ipfs_version}}/go-ipfs.tar.gz
        timeout: 30

    - name: unpack go-ipfs
      become: yes
      unarchive:
        remote_src: yes
        src: /opt/go-ipfs/{{ipfs_version}}/go-ipfs.tar.gz
        dest: /opt/go-ipfs/{{ipfs_version}}
        creates: /opt/go-ipfs/{{ipfs_version}}/go-ipfs
      notify: restart IPFS

    - name: link go-ipfs executable
      become: yes
      file:
        state: link
        owner: root
        group: root
        dest: /usr/local/bin/ipfs
        src: /opt/go-ipfs/{{ipfs_version}}/go-ipfs/ipfs

- name: install ipfs systemd init service
  become: yes
  template:
    src: etc/systemd/system/ipfs.service
    dest: /etc/systemd/system/ipfs.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd
    - restart IPFS
  when:
    - not (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA")
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<'))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))
  tags:
    - init

- name: install ipfs init service
  become: yes
  template:
    src: etc/init.d/ipfs
    dest: /etc/init.d/ipfs
    owner: root
    group: root
    mode: 0744
  notify:
    - restart IPFS
  when:
    - (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA") or
      (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<')) or
      (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))
  tags:
    - init


- name: make ipfs group
  become: yes
  group:
    state: present
    name: ipfs

- name: make ipfs user
  become: yes
  user:
    state: present
    name: ipfs
    group: ipfs
    shell: /bin/bash
    home: "{{ ipfs_home }}"
    comment: IPFS user
    system: yes

- name: copy default config
  become: yes
  template:
    src: home/ipfs/ipfs_default_config
    dest: "{{ ipfs_home }}/ipfs_default_config"
    owner: ipfs
    group: ipfs
    mode: 0644
  tags:
    - config

- name: init IPFS
  become: yes
  become_user: ipfs
  command: ipfs init --empty-repo -- {{ ipfs_home }}/ipfs_default_config
  args:
    creates: "{{ ipfs_home }}/.ipfs/config"
  notify: restart IPFS

- name: set version file (to notify restart on upgrades)
  become: yes
  copy:
    content: "{{ ipfs_version }}"
    dest: "{{ ipfs_home }}/ipfs_deployed_version"
    mode: 0644
    owner: ipfs
    group: ipfs
  notify: restart IPFS
  
- name: reload systemd
  become: yes
  systemd:
    daemon_reload: yes
    name: ipfs
  when:
    - not (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA")
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<'))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))

- name: enable and start IPFS
  become: yes
  service:
    name: ipfs
    state: started
    enabled: yes


########## Update and restart configs only
- name: "[update-config] copy default config"
  become: yes
  template:
    src: home/ipfs/ipfs_default_config
    dest: "{{ ipfs_home }}/.ipfs/config"
    owner: ipfs
    group: ipfs
    mode: 0644
    backup: true
  tags:
    - update-ipfs-config
  notify: restart IPFS

- name: "[update-config] set version file (to notify restart on upgrades)"
  become: yes
  copy:
    content: "{{ ipfs_version }}"
    dest: "{{ ipfs_home }}/ipfs_deployed_version"
    mode: 0644
    owner: ipfs
    group: ipfs
  tags:
    - update-ipfs-config
  notify: restart IPFS
  
- name: "[update-config] reload systemd"
  become: yes
  systemd:
    daemon_reload: yes
    name: ipfs
  tags:
    - update-ipfs-config
  when:
    - not (ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA")
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('15.04', '<'))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version('8', '<'))

- name: "[update-config] enable and start IPFS"
  become: yes
  service:
    name: ipfs
    state: started
    enabled: yes
  tags:
    - update-ipfs-config

